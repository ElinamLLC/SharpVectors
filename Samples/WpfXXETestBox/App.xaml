<Application x:Class="WpfXXETestBox.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WpfXXETestBox"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <!-- Scrollbar Style -->
        <Style x:Key="ScrollBarTrackThumb" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid x:Name="Grid">
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                            <Border x:Name="CornerScrollBarRectangle" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                            Width="Auto" Height="Auto" Margin="0,1,0,1" Background="{TemplateBinding Background}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Tag" Value="Horizontal">
                                <Setter TargetName="CornerScrollBarRectangle" Property="Width" Value="Auto" />
                                <Setter TargetName="CornerScrollBarRectangle" Property="Height" Value="12" />
                            </Trigger>
                            <Trigger Property="Tag" Value="Vertical">
                                <Setter TargetName="CornerScrollBarRectangle" Property="Width" Value="12" />
                                <Setter TargetName="CornerScrollBarRectangle" Property="Height" Value="Auto" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
            <Setter Property="Foreground" Value="DarkGray" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Width" Value="18" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="18" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0.00001*" />
                            </Grid.RowDefinitions>
                            <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollBarTrackThumb}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                </Track.DecreaseRepeatButton>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                            </Trigger>
                            <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <Setter TargetName="GridRoot" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_Track" Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Width" Value="Auto" />
                                <Setter Property="Height" Value="12" />
                                <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                            </Trigger>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="Width" Value="12" />
                                <Setter Property="Height" Value="auto" />
                                <Setter TargetName="Thumb" Property="Tag" Value="Vertical" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- GridExpander Handle Style -->
        <Style x:Key="ExpanderHandleStyle"
           TargetType="ToggleButton">
            <Setter Property="Cursor"
                Value="Hand" />
            <Setter Property="IsChecked"
                Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid x:Name="Root">

                            <!-- VSM -->
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0:0:00.2"
                                                      To="MouseOver" />
                                        <VisualTransition GeneratedDuration="0:0:00.2"
                                                      To="Normal" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="BackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="00:00:00.3"
                                                         To="0.4" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="BackgroundBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         Duration="00:00:00.3"
                                                         To="1" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <Grid HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch">
                                <!-- Background -->
                                <Border x:Name="BackgroundBorder"
                                    CornerRadius="3"
                                    BorderBrush="#FF000000"
                                    BorderThickness="0"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="Gray"
                                    Opacity="0" />

                                <!-- Vertical Handle Icon -->
                                <Path Data="M0,0 L0,16 L8,8 Z"
                                  Fill="{TemplateBinding Foreground}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:GridExpander}}}"
                                  x:Name="ArrowShape"
                                  RenderTransformOrigin="0.5,0.5">
                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}">
                                            <Setter Property="RenderTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="0" />
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>

                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                                                         Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                                                                             By="180"
                                                                             Duration="00:00:00" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle"
                                                                             By="-180"
                                                                             Duration="00:00:00" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=Direction}"
                                                               Value="Previous" />
                                                        <Condition Binding="{Binding Path=VerticalAlignment}"
                                                               Value="Stretch" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="180" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=Direction}"
                                                               Value="Previous" />
                                                        <Condition Binding="{Binding Path=HorizontalAlignment}"
                                                               Value="Stretch" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="-90" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=Direction}"
                                                               Value="Next" />
                                                        <Condition Binding="{Binding Path=VerticalAlignment}"
                                                               Value="Stretch" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="0" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Path=Direction}"
                                                               Value="Next" />
                                                        <Condition Binding="{Binding Path=HorizontalAlignment}"
                                                               Value="Stretch" />
                                                    </MultiDataTrigger.Conditions>
                                                    <MultiDataTrigger.Setters>
                                                        <Setter Property="RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="90" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </MultiDataTrigger.Setters>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>
                                </Path>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- GridExpander Preview -->
        <Style x:Key="GridExpanderPreviewStyle" TargetType="Control">
            <Setter Property="Background" Value="#FF868686" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Control">
                        <Grid x:Name="Root" Opacity=".5">
                            <!-- Background -->
                            <Rectangle Fill="{TemplateBinding Background}" />

                            <Grid x:Name="TheTemplate" Width="6">
                                <!-- Just show the faint gray grid splitter rectangle with no other details -->
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- GridExpander -->
        <Style x:Key="{x:Type local:GridExpander}" TargetType="{x:Type local:GridExpander}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="IsTabStop" Value="true" />
            <Setter Property="PreviewStyle" Value="{StaticResource GridExpanderPreviewStyle}" />
            <Setter Property="HandleStyle" Value="{StaticResource ExpanderHandleStyle}" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="local:GridExpander">
                        <Grid x:Name="Root" IsHitTestVisible="{TemplateBinding IsEnabled}">
                            <!-- VSM -->
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Opacity"
                                                         To="0.5" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition GeneratedDuration="0" />
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Unfocused" />
                                    <VisualState x:Name="Focused">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="FocusVisual"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>

                            <!-- Background -->
                            <Rectangle x:Name="GridExpanderBackground"
                                   Fill="{TemplateBinding Background}"
                                   StrokeThickness="0" />

                            <!-- Element Template -->
                            <Grid x:Name="TheTemplate" HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch" MaxWidth="50" MaxHeight="50">
                                <!-- GridExpander Handle -->
                                <ToggleButton x:Name="ExpanderHandle" Grid.Row="1" IsHitTestVisible="True"
                                          Style="{TemplateBinding HandleStyle}" RenderTransformOrigin="0.5,0.5">
                                </ToggleButton>
                            </Grid>

                            <!-- Focus Visual -->
                            <Rectangle x:Name="FocusVisual" Stroke="#FF6DBDD1" StrokeThickness="1" 
                                   Opacity="0" IsHitTestVisible="false" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ColorButton.FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ColorButton.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="ColorButton.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="ColorButton.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="ColorButton.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="ColorButton.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="ColorButton.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="ColorButton.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="ColorButton.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="ColorButton.Disabled.Foreground" Color="#FF838383"/>

        <Style x:Key="btnBorderOnly" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ColorButton.FocusVisual}"/>
            <Setter Property="Background" Value="#00000000"/>
            <!--<Setter Property="BorderBrush" Value="{StaticResource ColorButton.Static.Border}"/>-->
            <Setter Property="BorderBrush" Value="LightGray"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource ColorButton.MouseOver.Background}"/>-->
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ColorButton.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource ColorButton.Pressed.Background}"/>-->
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ColorButton.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource ColorButton.Disabled.Background}"/>-->
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource ColorButton.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource ColorButton.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Application.Resources>
</Application>
