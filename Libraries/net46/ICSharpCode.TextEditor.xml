<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.TextEditor</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.TextEditor.Document.LineViewerStyle">
            <summary>
                Describes the caret marker
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.LineViewerStyle.None">
            <summary>
                No line viewer will be displayed
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.LineViewerStyle.FullRow">
            <summary>
                The row in which the caret is will be marked
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.IndentStyle">
            <summary>
                Describes the indent style
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.IndentStyle.None">
            <summary>
                No indentation occurs
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.IndentStyle.Auto">
            <summary>
                The indentation from the line above will be
                taken to indent the curent line
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.IndentStyle.Smart">
            <summary>
                Inteligent, context sensitive indentation will occur
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.BracketHighlightingStyle">
            <summary>
                Describes the bracket highlighting style
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.BracketHighlightingStyle.None">
            <summary>
                Brackets won't be highlighted
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.BracketHighlightingStyle.OnBracket">
            <summary>
                Brackets will be highlighted if the caret is on the bracket
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.BracketHighlightingStyle.AfterBracket">
            <summary>
                Brackets will be highlighted if the caret is after the bracket
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DocumentSelectionMode">
            <summary>
                Describes the selection mode of the text area
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.DocumentSelectionMode.Normal">
            <summary>
                The 'normal' selection mode.
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.DocumentSelectionMode.Additive">
            <summary>
                Selections will be added to the current selection or new
                ones will be created (multi-select mode)
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DefaultDocument">
            <summary>
                The default <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> implementation.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DocumentEventHandler">
            <summary>
                This delegate is used for document events.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DocumentEventArgs">
            <summary>
                This class contains more information on a document event
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
                Creates a new instance off <see cref="T:ICSharpCode.TextEditor.Document.DocumentEventArgs" />
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(ICSharpCode.TextEditor.Document.IDocument,System.Int32)">
            <summary>
                Creates a new instance off <see cref="T:ICSharpCode.TextEditor.Document.DocumentEventArgs" />
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Int32)">
            <summary>
                Creates a new instance off <see cref="T:ICSharpCode.TextEditor.Document.DocumentEventArgs" />
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Int32,System.String)">
            <summary>
                Creates a new instance off <see cref="T:ICSharpCode.TextEditor.Document.DocumentEventArgs" />
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.DocumentEventArgs.Document">
            <returns>
                always a valid Document which is related to the Event.
            </returns>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.DocumentEventArgs.Offset">
            <returns>
                -1 if no offset was specified for this event
            </returns>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.DocumentEventArgs.Text">
            <returns>
                null if no text was specified for this event
            </returns>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.DocumentEventArgs.Length">
            <returns>
                -1 if no length was specified for this event
            </returns>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DocumentFactory">
            <summary>
                This interface represents a container which holds a text sequence and
                all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentFactory.CreateDocument">
            <remarks>
                Creates a new <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> object. Only create
                <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> with this method.
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentFactory.CreateFromTextBuffer(ICSharpCode.TextEditor.Document.ITextBufferStrategy)">
            <summary>
                Creates a new document and loads the given file
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DocumentFactory.CreateFromFile(System.String)">
            <summary>
                Creates a new document and loads the given file
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.XmlFoldStart">
            <summary>
            Holds information about the start of a fold in an xml string.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.XmlFoldStart.Line">
            <summary>
            The line where the fold should start.  Lines start from 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.XmlFoldStart.Column">
            <summary>
            The column where the fold should start.  Columns start from 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.XmlFoldStart.Name">
            <summary>
            The name of the xml item with its prefix if it has one.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.XmlFoldStart.FoldText">
            <summary>
            The text to be displayed when the item is folded.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.XmlFoldingStrategy">
            <summary>
            Determines folds for an xml string in the editor.
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.showAttributesWhenFolded">
            <summary>
            Flag indicating whether attributes should be displayed on folded
            elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.GenerateFoldMarkers(ICSharpCode.TextEditor.Document.IDocument,System.String,System.Object)">
            <summary>
            Adds folds to the text editor around each start-end element pair.
            </summary>
            <remarks>
            <para>If the xml is not well formed then no folds are created.</para> 
            <para>Note that the xml text reader lines and positions start 
            from 1 and the SharpDevelop text editor line information starts
            from 0.</para>
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.CreateCommentFold(ICSharpCode.TextEditor.Document.IDocument,System.Collections.Generic.List{ICSharpCode.TextEditor.Document.FoldMarker},System.Xml.XmlTextReader)">
            <summary>
            Creates a comment fold if the comment spans more than one line.
            </summary>
            <remarks>The text displayed when the comment is folded is the first 
            line of the comment.</remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.CreateElementFoldStart(System.Xml.XmlTextReader)">
            <summary>
            Creates an XmlFoldStart for the start tag of an element.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.CreateElementFold(ICSharpCode.TextEditor.Document.IDocument,System.Collections.Generic.List{ICSharpCode.TextEditor.Document.FoldMarker},System.Xml.XmlTextReader,ICSharpCode.TextEditor.Document.XmlFoldStart)">
            <summary>
            Create an element fold if the start and end tag are on 
            different lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.GetAttributeFoldText(System.Xml.XmlTextReader)">
            <summary>
            Gets the element's attributes as a string on one line that will
            be displayed when the element is folded.
            </summary>
            <remarks>
            Currently this puts all attributes from an element on the same
            line of the start tag.  It does not cater for elements where attributes
            are not on the same line as the start tag.
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFoldingStrategy.XmlEncodeAttributeValue(System.String,System.Char)">
            <summary>
            Xml encode the attribute string since the string returned from
            the XmlTextReader is the plain unencoded string and .NET
            does not provide us with an xml encode method.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.XmlFormattingStrategy">
            <summary>
            This class currently inserts the closing tags to typed openening tags
            and does smart indentation for xml files.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFormattingStrategy.SmartIndentLine(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            Define XML specific smart indenting for a line :)
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.XmlFormattingStrategy.IndentLines(ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
            This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.HighlightingDefinitionInvalidException">
            <summary>
                Indicates that the highlighting definition that was tried to load was invalid.
                You get this exception only once per highlighting definition, after that the definition
                is replaced with the default highlighter.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.IDocument">
            <summary>
                This interface represents a container which holds a text sequence and
                all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.ReadOnly">
            <value>
                If true the document can't be altered
            </value>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.FormattingStrategy">
            <summary>
                The <see cref="T:ICSharpCode.TextEditor.Document.IFormattingStrategy" /> attached to the <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> instance
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.TextBufferStrategy">
            <summary>
                The <see cref="T:ICSharpCode.TextEditor.Document.ITextBufferStrategy" /> attached to the <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> instance
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.FoldingManager">
            <summary>
                The <see cref="P:ICSharpCode.TextEditor.Document.IDocument.FoldingManager" /> attached to the <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> instance
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.HighlightingStrategy">
            <summary>
                The <see cref="T:ICSharpCode.TextEditor.Document.IHighlightingStrategy" /> attached to the <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> instance
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.BookmarkManager">
            <summary>
                The <see cref="P:ICSharpCode.TextEditor.Document.IDocument.BookmarkManager" /> attached to the <see cref="T:ICSharpCode.TextEditor.Document.IDocument" /> instance
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.UpdateQueue">
            <value>
                A container where all TextAreaUpdate objects get stored
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.RequestUpdate(ICSharpCode.TextEditor.TextAreaUpdate)">
            <remarks>
                Requests an update of the textarea
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.CommitUpdate">
            <remarks>
                Commits all updates in the queue to the textarea (the
                textarea will be painted)
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.UpdateSegmentListOnDocumentChange``1(System.Collections.Generic.List{``0},ICSharpCode.TextEditor.Document.DocumentEventArgs)">
            <summary>
                Moves, Resizes, Removes a list of segments on insert/remove/replace events.
            </summary>
        </member>
        <member name="E:ICSharpCode.TextEditor.Document.IDocument.UpdateCommited">
            <summary>
                Is fired when CommitUpdate is called
            </summary>
        </member>
        <member name="E:ICSharpCode.TextEditor.Document.IDocument.DocumentAboutToBeChanged">
            <summary>
            </summary>
        </member>
        <member name="E:ICSharpCode.TextEditor.Document.IDocument.DocumentChanged">
            <summary>
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.LineSegmentCollection">
            <value>
                A collection of all line segments
            </value>
            <remarks>
                The collection should only be used if you're aware
                of the 'last line ends with a delimiter problem'. Otherwise
                the <see cref="M:ICSharpCode.TextEditor.Document.IDocument.GetLineSegment(System.Int32)" /> method should be used.
            </remarks>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.TotalNumberOfLines">
            <value>
                The total number of lines in the document.
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetLineNumberForOffset(System.Int32)">
            <remarks>
                Returns a valid line number for the given offset.
            </remarks>
            <param name="offset">
                A offset which points to a character in the line which
                line number is returned.
            </param>
            <returns>
                An int which value is the line number.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetLineSegmentForOffset(System.Int32)">
            <remarks>
                Returns a <see cref="T:ICSharpCode.TextEditor.Document.LineSegment" /> for the given offset.
            </remarks>
            <param name="offset">
                A offset which points to a character in the line which
                is returned.
            </param>
            <returns>
                A <see cref="T:ICSharpCode.TextEditor.Document.LineSegment" /> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetLineSegment(System.Int32)">
            <remarks>
                Returns a <see cref="T:ICSharpCode.TextEditor.Document.LineSegment" /> for the given line number.
                This function should be used to get a line instead of getting the
                line using the list.
            </remarks>
            <param name="lineNumber">
                The line number which is requested.
            </param>
            <returns>
                A <see cref="T:ICSharpCode.TextEditor.Document.LineSegment" /> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetFirstLogicalLine(System.Int32)">
            <remarks>
                Get the first logical line for a given visible line.
                example : lineNumber == 100 foldings are in the linetracker
                between 0..1 (2 folded, invisible lines) this method returns 102
                the 'logical' line number
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetLastLogicalLine(System.Int32)">
            <remarks>
                Get the last logical line for a given visible line.
                example : lineNumber == 100 foldings are in the linetracker
                between 0..1 (2 folded, invisible lines) this method returns 102
                the 'logical' line number
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetVisibleLine(System.Int32)">
            <remarks>
                Get the visible line for a given logical line.
                example : lineNumber == 100 foldings are in the linetracker
                between 0..1 (2 folded, invisible lines) this method returns 98
                the 'visible' line number
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetNextVisibleLineAbove(System.Int32,System.Int32)">
            <remarks>
                Get the next visible line after lineNumber
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetNextVisibleLineBelow(System.Int32,System.Int32)">
            <remarks>
                Get the next visible line below lineNumber
            </remarks>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.TextContent">
            <value>
                Get the whole text as string.
                When setting the text using the TextContent property, the undo stack is cleared.
                Set TextContent only for actions such as loading a file; if you want to change the current document
                use the Replace method instead.
            </value>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.IDocument.TextLength">
            <value>
                The current length of the sequence of characters that can be edited.
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.Insert(System.Int32,System.String)">
            <summary>
                Inserts a string of characters into the sequence.
            </summary>
            <param name="offset">
                offset where to insert the string.
            </param>
            <param name="text">
                text to be inserted.
            </param>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.Remove(System.Int32,System.Int32)">
            <summary>
                Removes some portion of the sequence.
            </summary>
            <param name="offset">
                offset of the remove.
            </param>
            <param name="length">
                number of characters to remove.
            </param>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
                Replace some portion of the sequence.
            </summary>
            <param name="offset">
                offset.
            </param>
            <param name="length">
                number of characters to replace.
            </param>
            <param name="text">
                text to be replaced with.
            </param>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetCharAt(System.Int32)">
            <summary>
                Returns a specific char of the sequence.
            </summary>
            <param name="offset">
                Offset of the char to get.
            </param>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.GetText(System.Int32,System.Int32)">
            <summary>
                Fetches a string of characters contained in the sequence.
            </summary>
            <param name="offset">
                Offset into the sequence to fetch
            </param>
            <param name="length">
                number of characters to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.OffsetToPosition(System.Int32)">
            <summary>
                returns the logical line/column position from an offset
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IDocument.PositionToOffset(ICSharpCode.TextEditor.TextLocation)">
            <summary>
                returns the offset from a logical line/column position
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.ISegment">
            <summary>
                This interface is used to describe a span inside a text sequence
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.ISegment.Offset">
            <value>
                The offset where the span begins
            </value>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.ISegment.Length">
            <value>
                The length of the span
            </value>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DeferredEventList">
            <summary>
                A list of events that are fired after the line manager has finished working.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.LineSegmentTree">
            <summary>
                Data structure for efficient management of the line segments (most operations are O(lg n)).
                This implements an augmented red-black tree where each node has fields for the number of
                nodes in its subtree (like an order statistics tree) for access by index(=line number).
                Additionally, each node knows the total length of all segments in its subtree.
                This means we can find nodes by offset in O(lg n) time. Since the offset itself is not stored in
                the line segment but computed from the lengths stored in the tree, we adjusting the offsets when
                text is inserted in one line means we just have to increment the totalLength of the affected line and
                its parent nodes - an O(lg n) operation.
                However this means getting the line number or offset from a LineSegment is not a constant time
                operation, but takes O(lg n).
                NOTE: The tree is never empty, Clear() causes it to contain an empty segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.TotalLength">
            <summary>
                Gets the total length of all line segments. Runs in O(1).
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.Count">
            <summary>
                Gets the number of items in the collections. Runs in O(1).
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.Item(System.Int32)">
            <summary>
                Gets or sets an item by index. Runs in O(lg n).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.IndexOf(ICSharpCode.TextEditor.Document.LineSegment)">
            <summary>
                Gets the index of an item. Runs in O(lg n).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.Clear">
            <summary>
                Clears the list. Runs in O(1).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.Contains(ICSharpCode.TextEditor.Document.LineSegment)">
            <summary>
                Tests whether an item is in the list. Runs in O(n).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.CopyTo(ICSharpCode.TextEditor.Document.LineSegment[],System.Int32)">
            <summary>
                Copies all elements from the list to the array.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.SetSegmentLength(ICSharpCode.TextEditor.Document.LineSegment,System.Int32)">
            <summary>
                Updates the length of a line segment. Runs in O(lg n).
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.Invalid">
            <summary>
                An invalid enumerator value. Calling MoveNext on the invalid enumerator
                will always return false, accessing Current will throw an exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.Current">
            <summary>
                Gets the current value. Runs in O(1).
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.CurrentIndex">
            <summary>
                Gets the index of the current value. Runs in O(lg n).
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.CurrentOffset">
            <summary>
                Gets the offset of the current value. Runs in O(lg n).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.MoveNext">
            <summary>
                Moves to the next index. Runs in O(lg n), but for k calls, the combined time is only O(k+lg n).
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.MoveBack">
            <summary>
                Moves to the previous index. Runs in O(lg n), but for k calls, the combined time is only O(k+lg n).
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.AnchorMovementType.BeforeInsertion">
            <summary>
                Behaves like a start marker - when text is inserted at the anchor position, the anchor will stay
                before the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.TextEditor.Document.AnchorMovementType.AfterInsertion">
            <summary>
                Behave like an end marker - when text is insered at the anchor position, the anchor will move
                after the inserted text.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.TextAnchor">
            <summary>
                An anchor that can be put into a document and moves around when the document is changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.TextAnchor.MovementType">
            <summary>
                Controls how the anchor moves.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.TextUtilities.LeadingWhiteSpaceToTabs(System.String,System.Int32)">
            <remarks>
                This function takes a string and converts the whitespace in front of
                it to tabs. If the length of the whitespace at the start of the string
                was not a whole number of tabs then there will still be some spaces just
                before the text starts.
                the output string will be of the form:
                1. zero or more tabs
                2. zero or more spaces (less than tabIndent)
                3. the rest of the line
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.TextUtilities.GetExpressionBeforeOffset(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <remarks>
                This method returns the expression before a specified offset.
                That method is used in code completion to determine the expression given
                to the parser for type resolve.
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.TextUtilities.IsEmptyLine(ICSharpCode.TextEditor.Document.IDocument,System.Int32)">
            <remarks>
                Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.TextUtilities.IsEmptyLine(ICSharpCode.TextEditor.Document.IDocument,ICSharpCode.TextEditor.Document.LineSegment)">
            <remarks>
                Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.BookmarkManager">
            <summary>
                This class handles the bookmarks for a buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.BookmarkManager.Marks">
            <value>
                Contains all bookmarks
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.#ctor(ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
                Creates a new instance of <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManager" />
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.BookmarkManager.Factory">
            <summary>
                Gets/Sets the bookmark factory used to create bookmarks for "ToggleMarkAt".
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.ToggleMarkAt(ICSharpCode.TextEditor.TextLocation)">
            <summary>
                Sets the mark at the line <code>location.Line</code> if it is not set, if the
                line is already marked the mark is cleared.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.IsMarked(System.Int32)">
            <returns>
                true, if a mark at mark exists, otherwise false
            </returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.Clear">
            <remarks>
                Clears all bookmark
            </remarks>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.GetFirstMark(System.Predicate{ICSharpCode.TextEditor.Document.Bookmark})">
            <value>
                The lowest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.GetLastMark(System.Predicate{ICSharpCode.TextEditor.Document.Bookmark})">
            <value>
                The highest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.GetNextMark(System.Int32,System.Predicate{ICSharpCode.TextEditor.Document.Bookmark})">
            <remarks>
                returns first mark higher than <code>lineNr</code>
            </remarks>
            <returns>
                returns the next mark > cur, if it not exists it returns FirstMark()
            </returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManager.GetPrevMark(System.Int32,System.Predicate{ICSharpCode.TextEditor.Document.Bookmark})">
            <remarks>
                returns first mark lower than <code>lineNr</code>
            </remarks>
            <returns>
                returns the next mark lower than cur, if it not exists it returns LastMark()
            </returns>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento">
            <summary>
                This class is used for storing the state of a bookmark manager
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor">
            <summary>
                Creates a new instance of <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento" />
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor(System.Xml.XmlElement)">
            <summary>
                Creates a new instance of <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento" />
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento" />
            </summary>
        </member>
        <member name="P:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.Bookmarks">
            <value>
                Contains all bookmarks as int values
            </value>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.CheckMemento(ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
                Validates all bookmarks if they're in range of the document.
                (removing all bookmarks &lt; 0 and bookmarks &gt; max. line number
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.FromXmlElement(System.Xml.XmlElement)">
            <summary>
                Converts a xml element to a <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento" /> object
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.BookmarkManagerMemento.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
                Converts this <see cref="T:ICSharpCode.TextEditor.Document.BookmarkManagerMemento" /> to a xml element
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy">
            <summary>
                This class handles the auto and smart indenting in the textbuffer while
                you type.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.FormatLine(ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
                This function formats a specific line after <code>ch</code> is pressed.
            </summary>
            <returns>
                the caret delta position the caret will be moved this number
                of bytes (e.g. the number of bytes inserted before the caret, or
                removed, if this number is negative)
            </returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.IndentLine(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
                This function sets the indentation level in a specific line
            </summary>
            <returns>
                the number of inserted characters.
            </returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.IndentLines(ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
                This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.GetIndentation(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
                returns the whitespaces which are before a non white space character in the line line
                as a string.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.AutoIndentLine(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
                Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.SmartReplaceLine(ICSharpCode.TextEditor.Document.IDocument,ICSharpCode.TextEditor.Document.LineSegment,System.String)">
            <summary>
                Replaces the text in a line.
                If only whitespace at the beginning and end of the line was changed, this method
                only adjusts the whitespace and doesn't replace the other text.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.SmartIndentLine(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
                Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="T:ICSharpCode.TextEditor.Document.IFormattingStrategy">
            <summary>
                This interface handles the auto and smart indenting and formating
                in the document while  you type. Language bindings could overwrite this
                interface and define their own indentation/formating.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IFormattingStrategy.FormatLine(ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
                This function formats a specific line after <code>ch</code> is pressed.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IFormattingStrategy.IndentLine(ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
                This function sets the indentation level in a specific line
            </summary>
            <returns>
                The target caret position (length of new indentation).
            </returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IFormattingStrategy.IndentLines(ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
                This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IFormattingStrategy.SearchBracketBackward(ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
                Finds the offset of the opening bracket in the block defined by offset skipping
                brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the closing bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the opening bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.IFormattingStrategy.SearchBracketForward(ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
                Finds the offset of the closing bracket in the block defined by offset skipping
                brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the opening bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the closing bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultHighlightingStrategy.PushCurWord(ICSharpCode.TextEditor.Document.IDocument,ICSharpCode.TextEditor.Document.HighlightColor@,System.Collections.Generic.List{ICSharpCode.TextEditor.Document.TextWord})">
            <summary>
                pushes the curWord string on the word list, with the
                correct color.
            </summary>
        </member>
        <member name="M:ICSharpCode.TextEditor.Document.DefaultHighlightingStrategy.GetRegString(ICSharpCode.TextEditor.Document.LineSegment,System.Char[],System.Int32,ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
                get the string, which